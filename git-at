#!/bin/sh

set -e

help="git-at <commit-ish> <file|filepath|relative filepath> [-w]"

[ -z "$1" ] || [ -z "$2" ] && {
	>&2 echo "$help"
	exit 1
}

time="$1"
file="$2"
shift
shift

WRITE_TO_HEAD=0

while test $# -gt 0; do
	case $1 in
		-w)
			WRITE_TO_HEAD=1
			shift
			;;
		*)
			>&2 echo "$help"
			>&2 echo "\nunknown opt '$1'."
			exit 1
			;;
	esac
done

repo_path="$(git rev-parse --show-toplevel)"
repo_name="$(basename "$repo_path")"

# need a relative path
# because git does not want an absolute one
#
# note that --relative-to is NOT posix.
#
filepath="$(realpath --relative-to="$repo_path" "$file")"

ago_dir="/tmp/git-at"
mkdir -p "$ago_dir"

filebase="$(basename "$file")"
#outfilepath="$ago_dir/$time:$filebase"
dirpath=$(dirname "$filepath")
outfilepath="$ago_dir/$repo_name/$dirpath/$time:$filebase"
mkdir -p "$(dirname "$outfilepath")"

[ -f "$outfilepath" ] && {
	# remove the file first, if it exists,
	# because we later remove the write permission
	chmod +w "$outfilepath"
	rm -f "$outfilepath"
}

if [ "$WRITE_TO_HEAD" -eq 1 ]; then
	/usr/bin/env git -c core.pager="cat" show "$time:$filepath" > "$filepath"
	exit 0
else
	/usr/bin/env git -c core.pager="cat" show "$time:$filepath" > "$outfilepath"
fi

# remove write permission to remind
# that you're viewing a file from a while ago
chmod -w "$outfilepath"

[ -z "$YES" ] && {
	$EDITOR "$outfilepath"
}

